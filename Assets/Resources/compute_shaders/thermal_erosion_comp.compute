// Each #kernel tells which function to compile; you can have many kernels

#define VARIANT_NHOOD_BIG9

#pragma kernel CSThermal_Precalculation 
#pragma kernel CSThermal_Erosion
#pragma kernel CSThermal_TransferHeightToTexture

#include "structureGeneration.hlsl"
#include "neighbours.hlsl"
#include "heightColorTransformComp.hlsl"


cbuffer ConstantGlobalParameters {
	float g_tParam;
	float g_cParam;
	int g_sideLength;
};

GENERATE_CLASS_2( ThermalEroderPointPrecalculatedInfo,
	float, differenceTotal,
	float, differenceMax)

RWBuffer<float> HeightBuffer0;
RWBuffer<float> HeightBuffer1;

RWStructuredBuffer<ThermalEroderPointPrecalculatedInfo> MidTextureBuffer;



CS_NUMTHREADS_ONE
void CSThermal_Precalculation (uint3 id : SV_DispatchThreadID)
{
	uint2 size = uint2(g_sideLength, g_sideLength);

	NeighboursList list = FindNeighbours(id.xy, size);

	float pHeight = HeightBuffer0[Compute2DIndex(id.xy, size)]; 

	float differenceTotal = 0;
	float differenceMax = 0;
	int neighbourPresence = 0;
	float debugScalar = 0;

	for (int i = 0; i < NEIGHBOURHOOD_COUNT; i++) {
		OneNeighbourData neighbourData = list.array[i];
		if (is_OneNeighbourData_active(neighbourData)) {
			float difference = pHeight - HeightBuffer0[Compute2DIndex(neighbourData.position, size)];
			if (difference > g_tParam ) {
				differenceTotal += difference;
				if (difference > differenceMax) {
					differenceMax = difference;
				}
			}
		}
	}

	MidTextureBuffer[Compute2DIndex(id.xy, size)] = new_ThermalEroderPointPrecalculatedInfo( differenceTotal, differenceMax);
	HeightBuffer1[Compute2DIndex(id.xy, size)] = HeightBuffer0[Compute2DIndex(id.xy, size)];
}

CS_NUMTHREADS_ONE
void CSThermal_Erosion (uint3 id : SV_DispatchThreadID)
{
	uint2 size = uint2(g_sideLength, g_sideLength);

	float changeInHeight = 0;
	float debScalar = 0;

	float pHeight = HeightBuffer1[Compute2DIndex(id.xy, size)];
	ThermalEroderPointPrecalculatedInfo pPrecalculatedInfo = MidTextureBuffer[Compute2DIndex(id.xy, size)];

	NeighboursList list = FindNeighbours(id.xy, size);
	for (int i = 0; i < NEIGHBOURHOOD_COUNT; i++) {
		OneNeighbourData neighbourData = list.array[i];
		if (is_OneNeighbourData_active(neighbourData)) {
			ThermalEroderPointPrecalculatedInfo nPrecalculatedInfo = MidTextureBuffer[Compute2DIndex(neighbourData.position, size)];
			float nHeight = HeightBuffer1[Compute2DIndex(neighbourData.position, size)];
			float difference = pHeight - nHeight;
			if ( pPrecalculatedInfo.differenceMax > 0 ) {
				if (difference > g_tParam) { // we are higher than neighbour
					float moved = g_cParam * (pPrecalculatedInfo.differenceMax ) * (difference / pPrecalculatedInfo.differenceTotal);
					changeInHeight += -moved;
				}
			}
			if (nPrecalculatedInfo.differenceMax > 0) {
				float minusDifference = -difference;
				if (minusDifference > g_tParam ) {
					float moved = g_cParam * (nPrecalculatedInfo.differenceMax) * (minusDifference / nPrecalculatedInfo.differenceTotal);
					changeInHeight += moved;
				}
			}
		}
	}
	HeightBuffer0[Compute2DIndex(id.xy, size)] = pHeight + changeInHeight;
}

CS_NUMTHREADS_ONE
void CSThermal_TransferHeightToTexture(uint3 id : SV_DispatchThreadID)
{
	uint2 size = uint2(g_sideLength, g_sideLength);

	float height = HeightBuffer0[Compute2DIndex(id.xy, size)];
}